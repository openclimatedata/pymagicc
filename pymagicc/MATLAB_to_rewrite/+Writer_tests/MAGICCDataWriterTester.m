classdef MAGICCDataWriterTester < object_oriented_simcap_tests.MAGICCData_tests.SuperMAGICCDataTester
    methods (Test)
        function read_write_CONC_IN_identical_test(self)
            self.test_file_read_write_identical(self.test_MAGICC7_CONC_IN_file)
        end
        function read_write_SSP_SCEN7_identical_test(self)
            self.test_file_read_write_identical(self.test_SSP_SCEN7_file)
        end
        function read_write_HISTSSP_EMIS_IN_identical_test(self)
            self.test_file_read_write_identical(self.test_HISTSSP_EMIS_IN_file)
        end
        function read_write_SECTOR_identical_test(self)
            self.test_file_read_write_identical(self.test_MAGICC7_SECTOR_file)
        end
        
        function can_write_1pct_co2_CONC_IN_file(self)
            output_file_name = 'TEST_1PCT_CO2_CONC.IN';
            output_file = object_oriented_simcap.Utils.join_paths(...
                self.this_directory_path,output_file_name...
            );

            preind_CO2 = 278;
            year_axis = 1765:2300;
            co2_concs = object_oriented_simcap.Utils.convert_to_column_vector(...
                preind_CO2*1.01.^(year_axis-year_axis(1))...
            );

            Writer = object_oriented_simcap.MAGICCData;
            Writer.data_table = repmat(Writer.data_table(1,:),length(year_axis),1);
            Writer.data_table.Year(:) = year_axis;
            Writer.data_table.Value(:) = co2_concs;
            Writer.data_table.Variable(:) = {'CO2'};
            Writer.data_table.Region(:) = {'WORLD'};
            Writer.data_table.Unit(:) = {'ppm'};
            Writer.data_table.TODO(:) = {'SET'};

            Writer.Description = '1 %% per year rise in global CO2 concentrations';
            Writer.Source = 'N/A';
            Writer.Contact = 'zebedee.nicholls@climate-energy-college.org';
            Writer.Compiled_by = [...
                'Zebedee Nicholls, Australian-German Climate and Energy College, '...
                'University of Melbourne'...
            ];

            Writer.full_path_file2write = output_file;
            Writer.write_MAGICC_data_file

            self.MAGICCDataTest.read_MAGICC_data_file(output_file)

            self.verifyEqual(...
                self.MAGICCDataTest.full_path_source_file,...
                output_file...
            )
            self.verifyTrue(startsWith(...
                self.MAGICCDataTest.Date,...
                datestr(now,'dd-mmm-yyyy')...%testing to the second too hard
            ))
            self.verifyEqual(...
                self.MAGICCDataTest.Description,...
                replace(Writer.Description,'%%','%')...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Source,...
                Writer.Source...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Contact,...
                Writer.Contact...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Compiled_by,...
                Writer.Compiled_by...
            )

            self.verifyEqual(...
                self.MAGICCDataTest.Notes,...
                {}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Variable),...
                {'CO2'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.TODO),...
                {'SET'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Unit),...
                {'ppm'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Year),...
                (1765:2300)'...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Region),...
                {'WORLD'}...
            )

            co2_concs_from_year_axis = (...
                self.MAGICCDataTest.data_table.Value(1)*1.01...
                .^(self.MAGICCDataTest.data_table.Year-self.MAGICCDataTest.data_table.Year(1))...
            );
            self.verifyEqual(...
                self.MAGICCDataTest.data_table.Value,...
                co2_concs_from_year_axis,...
                'RelTol',10^-4 ...
            )

            delete(output_file)
        end
        
        function variables_converted_to_MAGICC_unit(self)
            self.MAGICCDataTest.read_MAGICC_data_file(...
                self.test_HISTSSP_EMIS_IN_file...
            );
            [fp,~,fe] = fileparts(self.test_HISTSSP_EMIS_IN_file);
        
            self.MAGICCDataTest.data_table.Variable(:) = {'HFC-152a'};
            self.MAGICCDataTest.full_path_file2write = object_oriented_simcap.Utils.join_paths(...
                fp,['HISTSSP_TESTWRITTEN_HFC152A_EMIS' fe]...
            );
            
            self.MAGICCDataTest.write_MAGICC_data_file
            output_file = self.MAGICCDataTest.full_path_file2write;
            
            self.MAGICCDataTest.read_MAGICC_data_file(output_file)
            self.verifyEqual(unique(self.MAGICCDataTest.data_table.Variable),{'HFC152A'})
            self.verifyEqual(unique(self.MAGICCDataTest.data_table.Value),0)
            
            expected_note = 'HFC-152a renamed as HFC152A to make it MAGICC7 compliant';
            self.verifyTrue(all(cellfun(...
                @(x) ismember(expected_note,x),...
                self.MAGICCDataTest.data_table.Notes...
            )))
            delete(output_file)
        end
        
        function units_converted_to_MAGICC_units(self)
            self.MAGICCDataTest = self.get_wrong_unit_MAGICCData;
            
            % delete WORLD rows to avoid regional breakdown checks
            WORLD_rows = strcmp(...
                self.MAGICCDataTest.data_table.Region,...
                'WORLD'...
            );
            self.MAGICCDataTest.data_table(WORLD_rows,:) = [];
            
            self.MAGICCDataTest.write_MAGICC_data_file
            output_file = self.MAGICCDataTest.full_path_file2write;
            
            self.MAGICCDataTest.read_MAGICC_data_file(output_file)
            self.verifyEqual(unique(self.MAGICCDataTest.data_table.Unit),{'kt'})
            self.verifyEqual(unique(self.MAGICCDataTest.data_table.Value),1010)
            self.verifyTrue(all(cellfun(...
                 @(x) ismember('Converted from Mt to kt by applying a conversion factor of 10^3',x),...
                 self.MAGICCDataTest.data_table.Notes...
            )))
            
            delete(output_file)
        end
    end
    methods (Access = private)
        function read_text = get_raw_text_from_file(self,file_full_path)
            file_id = fopen(file_full_path);
            read_text = textscan(...
                file_id,...
                '%s',...
                'whitespace', '',...
                'delimiter','\r\n'...
            );
            fclose(file_id);
        end

        function test_file_read_write_identical(self,file_path)
            initial_file = self.get_raw_text_from_file(file_path);
            self.MAGICCDataTest.read_MAGICC_data_file(file_path)
            self.MAGICCDataTest.full_path_file2write = replace(...
                file_path,...
                'TEST','TESTWRITTEN'...
            );
            self.MAGICCDataTest.write_MAGICC_data_file
            written_file = self.get_raw_text_from_file(self.MAGICCDataTest.full_path_file2write);
            self.verifyEqual(written_file,initial_file)
            delete(self.MAGICCDataTest.full_path_file2write)
        end
    end
end
