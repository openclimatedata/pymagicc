classdef MAGICCDataFileReaderTester < object_oriented_simcap_tests.MAGICCData_tests.SuperMAGICCDataTester
    methods (Test)
        function error_if_cant_read_tests(self)
            junk_file = object_oriented_simcap.Utils.join_paths(...
                self.this_directory_path,...
                'incorrectly-formatted-input-files',...
                'HIST_JUNKTEST_COI_CONC.IN'...
            );
            self.verifyError(...
                @() self.MAGICCDataTest.read_MAGICC_data_file(junk_file),...
                'MAGICCDataReaderError:unable_to_read_file',...
                ['I can''t read ' newline junk_file]...
            )
        end
        function can_read_CONC_IN_file_tests(self)
            self.MAGICCDataTest.read_MAGICC_data_file(self.test_CONC_IN_file)
            self.verifyEqual(...
                self.MAGICCDataTest.full_path_source_file,...
                self.test_CONC_IN_file...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Date,...
                '18-Jul-2006 10:44:17'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Description,...
                'Input with historic data'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Source,...
                ['www.giss.nasa.gov/data/simodel/ghgases/TG_A.1930-1990.txt '...
                 'and ...TG_A.1992-2004.txt']...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Contact,...
                ''...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Compiled_by,...
                ['Malte Meinshausen, Lauder NZ, NCAR/PIK, '...
                 'malte.meinshausen@gmail.com']...
            )

            self.verifyEqual(...
                self.MAGICCDataTest.Notes,...
                {}...
            )

            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Variable),...
                {'HFC23'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.TODO),...
                {'SET'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Unit),...
                {'ppt'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Year),...
                (1930:2004)'...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Region),...
                {'WORLD'}...
            )

            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'HFC23','WORLD',1930 ...
                ),...
                0 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'HFC23','WORLD',1931 ...
                ),...
                0 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'HFC23','WORLD',1951 ...
                ),...
                0.0720000000 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'HFC23','WORLD',1990 ...
                ),...
                8 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'HFC23','WORLD',2003 ...
                ),...
                18.3 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'HFC23','WORLD',2004 ...
                ),...
                19.4 ...
            )
        end
        function can_read_INVERSEEMIS_OUT_file_tests(self)
            self.MAGICCDataTest.read_MAGICC_data_file(self.test_INVERSEEMIS_OUT_file)
            self.verifyEqual(...
                self.MAGICCDataTest.full_path_source_file,...
                self.test_INVERSEEMIS_OUT_file...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Date,...
                'No Date specified.'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Description,...
                ''...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Source,...
                ''...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Contact,...
                ''...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Compiled_by,...
                ''...
            )

            self.verifyEqual(...
                self.MAGICCDataTest.Notes,...
                {}...
            )

            expected_gases = {...
                'CO2I' 'CH4' 'N2O' 'CF4' 'C2F6' 'C3F8' 'C4F10'...
                'C5F12' 'C6F14' 'C7F16' 'C8F18' 'CC4F8' 'HFC23'...
                'HFC32' 'HFC4310' 'HFC125' 'HFC134A' 'HFC143A' ...
                'HFC152A' 'HFC227EA' 'HFC236FA' 'HFC245FA' 'HFC365MFC'...
                'NF3' 'SF6' 'SO2F2' 'CFC11' 'CFC12' 'CFC113' 'CFC114'...
                'CFC115' 'HCFC22' 'HCFC141B' 'HCFC142B' 'CH3CCL3' ...
                'CCL4' 'CH3CL' 'CH2CL2' 'CHCL3' 'CH3BR' 'HALON1211'...
                'HALON1301' 'HALON2402' 'HALON1202'...
            };
            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Variable),...
                expected_gases...
            ))
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.TODO),...
                {'SET'}...
            )
            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Unit),...
                unique({'GtC' 'MtCH4' 'MtN2O-N' 'kt'})...
            ))
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Year),...
                [1765:2100]'...
            )

            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Region),...
                {'WORLD'}...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'CO2I','WORLD',1765 ...
                ),...
                0.013696380 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'N2O','WORLD',1765 ...
                ),...
                -0.77633205 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'C7F16','WORLD',2020 ...
                ),...
                0 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'CH4','WORLD',2050 ...
                ),...
                0.000016466593 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'HALON2402','WORLD',2099 ...
                ),...
                0.0086205159 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'HALON1202','WORLD',2100 ...
                ),...
                0 ...
            )
        end
        function add_new_unknown_data_table_column_error(self)
            Reader = object_oriented_simcap.Readers.MAGICCDataFileReader;
            junk_row = 'Junk';
            Reader.data.data_table.(junk_row) = 0;
            self.verifyError(...
                @() Reader.read_MAGICC_data_file(self.test_SSP_SCEN7_file),...
                'MAGICCDataReaderError:unrecognised_column',...
                ['I don''t know how to produce a tidy ' junk_row ...
                 ' row to read into the MAGICCData data_table']...
            )
        end
        function can_read_RCP_SCEN_file_tests(self)
            self.MAGICCDataTest.read_MAGICC_data_file(self.test_RCP_SCEN_file)
            self.verifyEqual(...
                self.MAGICCDataTest.full_path_source_file,...
                self.test_RCP_SCEN_file...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Date,...
                '26/11/2009 11:29:06; MAGICC-VERSION: 6.3.09, 25 November 2009'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Description,...
                ''...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Source,...
                ''...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Contact,...
                ''...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Compiled_by,...
                ''...
            )

            self.verifyEqual(...
                self.MAGICCDataTest.Notes,...
                {'RCP3PD';...
                 ['HARMONISED, EXTENDED FINAL RCP3-PD (Peak&Decline) '...
                  'NOV26; RCP3PD-Contact: IMAGE group, Detlef van '...
                  'Vuuren (Detlef.vanVuuren@pbl.nl)']}...
            )

            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Variable),...
                {'FossilCO2' 'OtherCO2' 'CH4' 'N2O' 'SOx' 'CO' 'NMVOC' 'NOx'...
                 'BC' 'OC' 'NH3' 'CF4' 'C2F6' 'C6F14' 'HFC23' 'HFC32' ...
                 'HFC43-10' 'HFC125' 'HFC134a' 'HFC143a' 'HFC227ea'...
                 'HFC245fa' 'SF6'}...
            ))
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.TODO),...
                {'SET'}...
            )
            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Unit),...
                unique({'GtC' 'GtC' 'MtCH4' 'MtN2O-N' 'MtS' 'MtCO' 'Mt' 'MtN'...
                        'Mt' 'Mt' 'MtN' 'kt' 'kt' 'kt' 'kt' 'kt' ...
                        'kt' 'kt' 'kt' 'kt' 'kt'...
                        'kt' 'kt'})...
            ))
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Year),...
                [(2000:2007) (2010:10:2100) 2125 2500]'...
            )

            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Region),...
                {'WORLD' 'R5OECD' 'R5REF' 'R5ASIA' 'R5MAF' 'R5LAM'...
                 'BUNKERS'}...
            ))
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'FossilCO2','WORLD',2000 ...
                ),...
                6.735 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'N2O','WORLD',2000 ...
                ),...
                7.4567 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'SOx','R5MAF',2001 ...
                ),...
                6.7229 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'NOx','R5OECD',2002 ...
                ),...
                11.0902 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'HFC43-10','R5ASIA',2100 ...
                ),...
                1.9645 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'SF6','BUNKERS',2500 ...
                ),...
                0 ...
            )
        end
        function can_read_SSP_SCEN7_file_tests(self)
            self.MAGICCDataTest.read_MAGICC_data_file(self.test_SSP_SCEN7_file)
            self.verifyEqual(...
                self.MAGICCDataTest.full_path_source_file,...
                self.test_SSP_SCEN7_file...
            )
            self.SSP_SCEN7_file_read_correctly_test
        end
        function can_read_SSP_SCEN7_file_spurious_blank_lines_in_notes_test(self)
            spurious_blanks_file = object_oriented_simcap.Utils.join_paths(...
                self.test_file_path,...
                'SSP1_26_SPA0_V25_IMAGE_NOTES_SPURIOUS_BLANKS_TEST.SCEN7'...
            );
            self.MAGICCDataTest.read_MAGICC_data_file(spurious_blanks_file)
            self.verifyEqual(...
                self.MAGICCDataTest.full_path_source_file,...
                spurious_blanks_file...
            )
            self.SSP_SCEN7_file_read_correctly_test
        end
        function can_read_HISTRCP_EMIS_IN_file_tests(self)
            self.MAGICCDataTest.read_MAGICC_data_file(self.test_HISTRCP_EMIS_IN_file)
            self.verifyEqual(...
                self.MAGICCDataTest.full_path_source_file,...
                self.test_HISTRCP_EMIS_IN_file...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Date,...
                ''...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Description,...
                ['RCP2009-HISTORY; MAGICC 6.X data file build for '...
                 'RCP2009- HISTORY - derived from PRIMAPDB with '...
                 'retrieval setting set histemisfile for source RCP2009 '...
                 'and scenario HISTORY - Historical fossil&industrial '...
                 'NMVOC (NMVOCI) Emissions']...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Source,...
                ['RCP data as presented on '...
                 'http://www.iiasa.ac.at/web-apps/tnt/RcpDb, August 2009']...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Contact,...
                ['RCP 3-PD (IMAGE): Detlef van Vuuren '...
                 '(detlef.vanvuuren@pbl.nl); RCP 4.5 (MiniCAM): Allison '...
                 'Thomson (Allison.Thomson@pnl.gov); RCP 6.0 (AIM): '...
                 'Toshihiko Masui (masui@nies.go.jp); RCP 8.5 (MESSAGE): '...
                 'Keywan Riahi (riahi@iiasa.ac.at); Base year emissions '...
                 'inventories: Steve Smith (ssmith@pnl.gov) and '...
                 'Jean-Francois Lamarque (Jean-Francois.Lamarque@noaa.gov)']...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Compiled_by,...
                ['Malte Meinshausen, malte.meinshausen@pik-potsdam.de, '...
                 'www.primap.org']...
            )

            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Variable),...
                {'NMVOCI'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.TODO),...
                {'SET'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Unit),...
                {'Mt'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Year),...
                (1765:2000)'...
            )

            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Region),...
                {'R5OECD' 'R5REF' 'R5ASIA' 'R5MAF' 'R5LAM' 'BUNKERS'}...
            ))
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'NMVOCI','R5OECD',1765 ...
                ),...
                0 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'NMVOCI','R5OECD',1766 ...
                ),...
                0.126020944 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'NMVOCI','R5REF',1767 ...
                ),...
                0.0532903201 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'NMVOCI','R5ASIA',1792 ...
                ),...
                1.26484213 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'NMVOCI','R5LAM',2000 ...
                ),...
                10.2040000 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'NMVOCI','BUNKERS',2000 ...
                ),...
                2.92700000 ...
            )
        end
        function can_read_HISTSSP_EMIS_IN_file_tests(self)
            self.MAGICCDataTest.read_MAGICC_data_file(self.test_HISTSSP_EMIS_IN_file)
            self.verifyEqual(...
                self.MAGICCDataTest.full_path_source_file,...
                self.test_HISTSSP_EMIS_IN_file...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Date,...
                '24-Nov-2017 16:17:10'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Description,...
                ['This emissions file was generated to complement the '...
                 '2017 SSP scenarios in order to produce concentration '...
                 'fields for the CMIP6 experiment.']...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Source,...
                'N/A PRIMAP data contains nothing of use'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Contact,...
                'TBC'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Compiled_by,...
                ['Zebedee Nicholls, Australian-German Climate and '...
                 'Energy College, University of Melbourne, '...
                 'zebedee.nicholls@climate-energy-college.org']...
            )

            self.verifyEqual(...
                self.MAGICCDataTest.Notes,...
                {'Drive script: generate_SSP_HIST_EMIS_IN_files.m';...
                 'Scripts and input data available from: <url-to-git-repository>';...
                 'Git commit tag: <Relevant commit tag in repository>';...
                 'Assembled with assemble_magicc_datastruc';}...
            )

            self.add_notes_to_test_and_expected_cellstr(...
                self.MAGICCDataTest.data_table.Notes,...
                {'Source unknown, filled with zeros'...
                 'Perhaps inverse emissions will be useful'}...
            )

            self.test_all_notes_to_test_contain_all_elmnts_of_expected_cellstrs

            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Variable),...
                {'C5F12'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.TODO),...
                {'SET'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Unit),...
                {'kt'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Year),...
                (1750:2015)'...
            )

            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Region),...
                {'R6OECD90' 'R6REF' 'R6ASIA' 'R6MAF' 'R6LAM'...
                 'BUNKERS'}...
            ))
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'C5F12','R6OECD90',1765 ...
                ),...
                0 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'C5F12','R6OECD90',1766 ...
                ),...
                0 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'C5F12','R6REF',1767 ...
                ),...
                0 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'C5F12','R6ASIA',1792 ...
                ),...
                0 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'C5F12','R6LAM',2000 ...
                ),...
                0 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'C5F12','BUNKERS',2000 ...
                ),...
                0 ...
            )
        end
        function can_read_MAGICC6_SECTOR_file_tests(self)
            self.MAGICCDataTest.read_MAGICC_data_file(self.test_MAGICC6_SECTOR_file)
            self.verifyEqual(...
                self.MAGICCDataTest.full_path_source_file,...
                self.test_MAGICC6_SECTOR_file...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Source,...
                ''...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Contact,...
                ''...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Notes,...
                {}...
            )
            self.verifyTrue(all(cellfun(...
                @isempty,...
                self.MAGICCDataTest.data_table.Notes...
            )))
            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Region),...
                {'ASIA'}...
            ))
            self.verify_SECTOR_file_read_correctly_tests
        end
        function can_read_MAGICC7_SECTOR_file_tests(self)
            self.MAGICCDataTest.read_MAGICC_data_file(self.test_MAGICC7_SECTOR_file)
            self.verifyEqual(...
                self.MAGICCDataTest.full_path_source_file,...
                self.test_MAGICC7_SECTOR_file...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Source,...
                'source should go in here'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Contact,...
                'contact goes here'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Notes,...
                {'Test file'}...
            )
        
            self.add_notes_to_test_and_expected_cellstr(...
                self.MAGICCDataTest.data_table.Notes,...
                {'Test data only'}...
            )
            note_row = strcmp(self.MAGICCDataTest.data_table.Variable,'CO2I') ...
                       & strcmp(self.MAGICCDataTest.data_table.Region,'R6ASIA') ...
                       & self.MAGICCDataTest.data_table.Year == 2045;
            self.add_notes_to_test_and_expected_cellstr(...
                self.MAGICCDataTest.data_table.Notes(note_row),...
                {'Test data only'}...
            )
            self.test_all_notes_to_test_contain_all_elmnts_of_expected_cellstrs
        
            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Region),...
                {'R6ASIA'}...
            ))
            
            self.verify_SECTOR_file_read_correctly_tests
        end
    end
    methods (Access = private)
        function SSP_SCEN7_file_read_correctly_test(self)
            self.verifyEqual(...
                self.MAGICCDataTest.Date,...
                '07-Dec-2017 19:24:29'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Description,...
                ['This scenario file was compiled to run MAGICC for '...
                 'the 2017 SSP scenarios in order to produce '...
                 'concentration fields for the CMIP6 experiment.']...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Source,...
                ['CEDS data from IAM runs of the SSPs. These have been '...
                 'harmonised and scaled to the 5 region level by Matthew '...
                 'Gidden before being placed in the CEDS database '...
                 'available at '...
                 'https://db1.ene.iiasa.ac.at/CEDSDB/dsd?Action=htmlpage&page=welcome. '...
                 'CEDS data from IAM runs of the SSPs. These have been '...
                 'harmonised and scaled to the 5 region level by '...
                 'Matthew Gidden before being placed in the CEDS '...
                 'database available at '...
                 'https://db1.ene.iiasa.ac.at/CEDSDB/dsd?Action=htmlpage&page=welcome. '...
                 'In the case of CO2B, N2OI and N2OB, the CEDS data has '...
                 'been scaled to the 5 region level by using the regional '...
                 'shares from the unharmonised data.']...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Contact,...
                'TBC'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Compiled_by,...
                'Zebedee Nicholls, Australian-German Climate and Energy College'...
            )

            self.verifyEqual(...
                self.MAGICCDataTest.Notes,...
                {'Drive script: generate_SSP_SCEN7_files.m';...
                 'Scripts and input data available from: <url-to-git-repository>';...
                 'Git commit tag: <Relevant commit tag in repository>';...
                 'Assembled with assemble_magicc_datastruc';...
                 'Checked with check_magicc_datastruc';...
                 'Fewer than one step per year, set THISFILE_ANNUALSTEPS to zero';}...
            )
        
            self.add_notes_to_test_and_expected_cellstr(...
                self.MAGICCDataTest.data_table.Notes,...
                {'SSP1 26 as modelled by IMAGE'}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                self.MAGICCDataTest.data_table.Year == 2100 ...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'10% more than 2090'}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Region,'WORLD')...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {['Sanity check passed: WORLD is the sum of BUNKERS, '...
                  'R6ASIA, R6LAM, R6MAF, R6OECD90, R6REF']}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Region,'WORLD')...
                & self.MAGICCDataTest.data_table.Year == 2070 ...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Sum of 2010 and 2100'}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Region,'R6LAM')...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Sum of CHN, IND, INS'}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'CO2I')...
            );
            expected_cellstr = {...
                ['CO2I represents fossil emissions so are the sum of '...
                 'Energy, Industrial and International Shipping.']...
                ['Converted emissions from Mt CO2/yr to GtC by applying '...
                 'a conversion factor of 0.00027273']...
            };
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                expected_cellstr...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'CO2I')...
                & strcmp(self.MAGICCDataTest.data_table.Region,'R6OECD90')...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Sum of AUS, CAN, USA, EU90 and BRA.'}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'CO2I')...
                & strcmp(self.MAGICCDataTest.data_table.Region,'BUNKERS')...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Sum of IZS and IZA.'}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'CO2B')...
            );
            expected_cellstr = {...
                ['CO2B represents agriculture and land use change '...
                 'emissions so are equal to Aggregate - Agriculture and LUC.']...
            };
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                expected_cellstr...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'CO2B')...
                & self.MAGICCDataTest.data_table.Year == 2030 ...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Average of 2020 and 2040'}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'CO2B')...
                & strcmp(self.MAGICCDataTest.data_table.Region,'WORLD')...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Curious case, can''t make harmonisation work.'}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'CO2B')...
                & strcmp(self.MAGICCDataTest.data_table.Region,'WORLD')...
                & self.MAGICCDataTest.data_table.Year == 2040 ...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Sum of 1/3*2030 and 2/3*2050.'}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'CO2B')...
                & strcmp(self.MAGICCDataTest.data_table.Region,'WORLD')...
                & self.MAGICCDataTest.data_table.Year == 2060 ...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Sum of 1/4*2030 and 3/4*2090'}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'CO2B')...
                & strcmp(self.MAGICCDataTest.data_table.Region,'BUNKERS')...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Zero by definition'}...
            )

            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'BCB')...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Renamed emissions units from Mt BC/yr to Mt'}...
            )
        
            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Region,'R6REF')...
                & self.MAGICCDataTest.data_table.Year == 2090 ...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Average of 2050-2060'}...
            )
        
            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Region,'R6ASIA')...
                & self.MAGICCDataTest.data_table.Year == 2090 ...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Average of 2050-2060'}...
            )
        
            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'OCB')...
                & strcmp(self.MAGICCDataTest.data_table.Region,'BUNKERS') ...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Zero by definition'}...
            )
        
            notes_to_test = self.MAGICCDataTest.data_table.Notes(...
                strcmp(self.MAGICCDataTest.data_table.Variable,'SOXB')...
                & strcmp(self.MAGICCDataTest.data_table.Region,'BUNKERS') ...
            );
            self.add_notes_to_test_and_expected_cellstr(...
                notes_to_test,...
                {'Zero by definition'}...
            )
        
            self.test_all_notes_to_test_contain_all_elmnts_of_expected_cellstrs

            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Variable),...
                {'CO2I' 'CO2B' 'CH4I' 'CH4B' 'N2OI' 'N2OB' 'SOXI' 'SOXB'...
                 'NOXI' 'NOXB' 'COI' 'COB' 'BCI' 'BCB' 'OCI' 'OCB' ...
                 'NMVOCI' 'NMVOCB' 'NH3I' 'NH3B'}...
            ))
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.TODO),...
                {'SET'}...
            )
            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Unit),...
                unique({'GtC' 'MtCH4' 'MtN2O-N' 'MtS' ...
                        'MtN' 'MtCO' 'Mt' 'Mt' ...
                        'Mt' 'MtN'})...
            ))
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Year),...
                [2015 (2020:10:2100)]'...
            )

            self.verifyTrue(object_oriented_simcap.Utils.contain_same_elements(...
                unique(self.MAGICCDataTest.data_table.Region),...
                {'WORLD' 'R6OECD90' 'R6REF' 'R6ASIA' 'R6MAF' 'R6LAM'...
                 'BUNKERS'}...
            ))

            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'CO2I','WORLD',2015 ...
                ),...
                9.7187 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'N2OB','WORLD',2015 ...
                ),...
                5.6895 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'SOXI','R6MAF',2020 ...
                ),...
                6.6230 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'NOXB','R6OECD90',2030 ...
                ),...
                0.4550 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'COI','R6ASIA',2090 ...
                ),...
                81.3662 ...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.return_variable_region_year_value(...
                    'NH3B','BUNKERS',2100 ...
                ),...
                0 ...
            )
        end
        function verify_SECTOR_file_read_correctly_tests(self)
            self.verifyEqual(...
                self.MAGICCDataTest.Date,...
                '3 Aug 2011 12:27:10'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Description,...
                'File to use to test SECTOR read in'...
            )
            self.verifyEqual(...
                self.MAGICCDataTest.Compiled_by,...
                ['Malte Meinshausen, PIK Potsdam, '...
                 'malte.meinshausen@pik-potsdam.de']...
            )            

            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Variable),...
                {'CO2I'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.TODO),...
                {'ADD'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Unit),...
                {'GtC'}...
            )
            self.verifyEqual(...
                unique(self.MAGICCDataTest.data_table.Year),...
                (2000:2050)'...
            )
        
            non_zero_rows = self.MAGICCDataTest.data_table.Year >= 2015 ...
                            & self.MAGICCDataTest.data_table.Year < 2045;
            self.verifyTrue(all(...
                self.MAGICCDataTest.data_table.Value(non_zero_rows) == 0.01337105 ...
            ))
            self.verifyTrue(all(...
                self.MAGICCDataTest.data_table.Value(~non_zero_rows) == 0.0 ...
            ))
        end
    end
end
