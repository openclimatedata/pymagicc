{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pymagicc Pymagicc is a Python wrapper around the reduced complexity climate model MAGICC6 . It wraps the CC-BY-NC-SA licensed MAGICC6 binary . Pymagicc itself is AGPL licensed. MAGICC (Model for the Assessment of Greenhouse Gas Induced Climate Change) is widely used in the assessment of future emissions pathways in climate policy analyses, e.g. in the Fifth Assessment Report of the Intergovernmental Panel on Climate Change or to model the physical aspects of climate change in Integrated Assessment Models (IAMs). Pymagicc makes the MAGICC model easily installable and usable from Python and allows for the easy modification of all MAGICC model parameters and emissions scenarios directly from Python. In climate research it can, for example, be used in the analysis of mitigation scenarios, in Integrated Assessment Models, complex climate model emulation, and uncertainty analyses, as well as in climate science education and communication. See www.magicc.org and Meinshausen et al. 2011 for further information. Basic Usage import pymagicc from pymagicc import scenarios import matplotlib.pyplot as plt for name, scen in scenarios.items(): results, params = pymagicc.run(scen, return_config=True) temp = (results[\"SURFACE_TEMP\"].GLOBAL.loc[1850:] - results[\"SURFACE_TEMP\"].GLOBAL.loc[1850:1900].mean()) temp.plot(label=name) plt.legend() plt.title(\"Global Mean Temperature Projection\") plt.ylabel(u\"\u00b0C over pre-industrial (1850-1900 mean)\") # Run `plt.show()` to display the plot when running this example # interactively or add `%matplotlib inline` on top when in a Jupyter Notebook. For more example usage see this Jupyter Notebook . Thanks to the Binder project the Notebook can be run and modified without installing anything locally. A small interactive demo app using Jupyter Notebook's appmode extension is also available. Installation pip install pymagicc On Linux and OS X the original compiled Windows binary available on http://www.magicc.org/ and included in Pymagicc can run using Wine . On modern 64-bit systems one needs to use the 32-bit version of Wine sudo dpkg --add-architecture i386 sudo apt-get install wine32 On 32-bit systems Debian/Ubuntu-based systems wine can be installed with sudo apt-get install wine On OS X wine is available in the Homebrew package manager: brew install wine It should also be available in other package managers, as well as directly from the Wine project . Note that after the first install the first run of Pymagicc might be slow due to setting up of the wine configuration and be accompanied by pop-ups or debug output. To run an example session using Jupyter Notebook and Python 3 you can run the following commands to create a virtual environment venv and install an editable version for local development: git clone https://github.com/openclimatedata/pymagicc.git cd pymagicc make venv ./venv/bin/pip install --editable . ./venv/bin/jupyter-notebook notebooks/Example.ipynb Development For local development, install dependencies and an editable version of Pymagicc from a clone or download of the Pymagicc repository with make venv ./venv/bin/pip install --editable . To run the tests run ./venv/bin/pytest tests --verbose To skip tests which run MAGICC and take longer use ./venv/bin/pytest tests --skip-slow To get a test coverage report, run ./venv/bin/pytest --cov To unify coding style black is used. To format the files in pymagicc and tests as well as setup.py run make black Building the documentation To build our documentation we use Pydocmd which uses MkDocs. The configuration is located in mkdocs.yml . To build the documentation, simply running make docs should build the docs for you. More Usage Examples Use an included scenario from pymagicc import rcp26 rcp26[\"WORLD\"].head() Read a MAGICC scenario file from pymagicc import read_scen_file scenario = read_scen_file(\"PATHWAY.SCEN\") Create a new scenario Pymagicc uses Pandas DataFrames to represent scenarios. Dictionaries are used for scenarios with multiple regions. import pandas as pd scenario = pd.DataFrame({ \"FossilCO2\": [8, 10, 9], \"OtherCO2\": [1.2, 1.1, 1.2], \"CH4\": [300, 250, 200]}, index=[2010, 2020, 2030] ) Run MAGICC for a scenario output = pymagicc.run(scenario) # Projected temperature adjusted to pre-industrial mean temp = (output[\"SURFACE_TEMP\"].GLOBAL - output[\"SURFACE_TEMP\"].loc[1850:2100].GLOBAL.mean()) Using a different MAGICC version A custom version of MAGICC may be used with pymagicc using the MAGICC_EXECUTABLE_6 and MAGICC_EXECUTABLE_7 environment variables for MAGICC6 and MAGICC7 respectively. These environment variables should be set to the location of the magicc executable (either magicc for linux/mac or magicc.exe for Windows). For example, a custom MAGICC7 folder located at /tmp/magicc can be used on under Linux by setting MAGICC_EXECUTABLE_7 to /tmp/magicc/run/magicc . Example usage in Bash: MAGICC_EXECUTABLE_7=/tmp/magicc/run/magicc.exe python run_tests.py Or in a script: #!/bin/bash export MAGICC_EXECUTABLE_7=tmp/magicc/run/magicc.exe python run_tests.py python generate_plots.py Contributing Please report issues or discuss feature requests on Pymagicc's issue tracker . When creating a pull request, please append the pull request url with either expand=1&template=new_feature.md or expand=1&template=bug_fix.md in order to use the templates we provide for pull requests. For example, when you land on the page with title 'Open a pull request' (either after hitting 'New Pull Request' --> 'Create Pull Request' or by some other means), your url will look something like 'https://github.com/openclimatedata/pymagicc/compare/update-readme-to-explain-pr-template'. Adding 'expand=1&template=bug_fix.md' to this makes it 'https://github.com/openclimatedata/pymagicc/compare/update-readme-to-explain-pr-template?expand=1&template=new_feature.md'. If you then refresh the page, you will then see that the template is automatically added to the pull request for you. You can also contact the pymagicc authors via email robert.gieseke@pik-potsdam.de . License The compiled MAGICC binary by Tom Wigley, Sarah Raper, and Malte Meinshausen included in this package is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License . The pymagicc wrapper is free software under the GNU Affero General Public License v3, see LICENSE . If you make any use of MAGICC, please cite: M. Meinshausen, S. C. B. Raper and T. M. L. Wigley (2011). \"Emulating coupled atmosphere-ocean and carbon cycle models with a simpler model, MAGICC6: Part I \"Model Description and Calibration.\" Atmospheric Chemistry and Physics 11: 1417-1456. doi:10.5194/acp-11-1417-2011 See also the MAGICC website and Wiki for further information.","title":"Overview"},{"location":"#pymagicc","text":"Pymagicc is a Python wrapper around the reduced complexity climate model MAGICC6 . It wraps the CC-BY-NC-SA licensed MAGICC6 binary . Pymagicc itself is AGPL licensed. MAGICC (Model for the Assessment of Greenhouse Gas Induced Climate Change) is widely used in the assessment of future emissions pathways in climate policy analyses, e.g. in the Fifth Assessment Report of the Intergovernmental Panel on Climate Change or to model the physical aspects of climate change in Integrated Assessment Models (IAMs). Pymagicc makes the MAGICC model easily installable and usable from Python and allows for the easy modification of all MAGICC model parameters and emissions scenarios directly from Python. In climate research it can, for example, be used in the analysis of mitigation scenarios, in Integrated Assessment Models, complex climate model emulation, and uncertainty analyses, as well as in climate science education and communication. See www.magicc.org and Meinshausen et al. 2011 for further information.","title":"Pymagicc"},{"location":"#basic-usage","text":"import pymagicc from pymagicc import scenarios import matplotlib.pyplot as plt for name, scen in scenarios.items(): results, params = pymagicc.run(scen, return_config=True) temp = (results[\"SURFACE_TEMP\"].GLOBAL.loc[1850:] - results[\"SURFACE_TEMP\"].GLOBAL.loc[1850:1900].mean()) temp.plot(label=name) plt.legend() plt.title(\"Global Mean Temperature Projection\") plt.ylabel(u\"\u00b0C over pre-industrial (1850-1900 mean)\") # Run `plt.show()` to display the plot when running this example # interactively or add `%matplotlib inline` on top when in a Jupyter Notebook. For more example usage see this Jupyter Notebook . Thanks to the Binder project the Notebook can be run and modified without installing anything locally. A small interactive demo app using Jupyter Notebook's appmode extension is also available.","title":"Basic Usage"},{"location":"#installation","text":"pip install pymagicc On Linux and OS X the original compiled Windows binary available on http://www.magicc.org/ and included in Pymagicc can run using Wine . On modern 64-bit systems one needs to use the 32-bit version of Wine sudo dpkg --add-architecture i386 sudo apt-get install wine32 On 32-bit systems Debian/Ubuntu-based systems wine can be installed with sudo apt-get install wine On OS X wine is available in the Homebrew package manager: brew install wine It should also be available in other package managers, as well as directly from the Wine project . Note that after the first install the first run of Pymagicc might be slow due to setting up of the wine configuration and be accompanied by pop-ups or debug output. To run an example session using Jupyter Notebook and Python 3 you can run the following commands to create a virtual environment venv and install an editable version for local development: git clone https://github.com/openclimatedata/pymagicc.git cd pymagicc make venv ./venv/bin/pip install --editable . ./venv/bin/jupyter-notebook notebooks/Example.ipynb","title":"Installation"},{"location":"#development","text":"For local development, install dependencies and an editable version of Pymagicc from a clone or download of the Pymagicc repository with make venv ./venv/bin/pip install --editable . To run the tests run ./venv/bin/pytest tests --verbose To skip tests which run MAGICC and take longer use ./venv/bin/pytest tests --skip-slow To get a test coverage report, run ./venv/bin/pytest --cov To unify coding style black is used. To format the files in pymagicc and tests as well as setup.py run make black","title":"Development"},{"location":"#building-the-documentation","text":"To build our documentation we use Pydocmd which uses MkDocs. The configuration is located in mkdocs.yml . To build the documentation, simply running make docs should build the docs for you.","title":"Building the documentation"},{"location":"#more-usage-examples","text":"","title":"More Usage Examples"},{"location":"#use-an-included-scenario","text":"from pymagicc import rcp26 rcp26[\"WORLD\"].head()","title":"Use an included scenario"},{"location":"#read-a-magicc-scenario-file","text":"from pymagicc import read_scen_file scenario = read_scen_file(\"PATHWAY.SCEN\")","title":"Read a MAGICC scenario file"},{"location":"#create-a-new-scenario","text":"Pymagicc uses Pandas DataFrames to represent scenarios. Dictionaries are used for scenarios with multiple regions. import pandas as pd scenario = pd.DataFrame({ \"FossilCO2\": [8, 10, 9], \"OtherCO2\": [1.2, 1.1, 1.2], \"CH4\": [300, 250, 200]}, index=[2010, 2020, 2030] )","title":"Create a new scenario"},{"location":"#run-magicc-for-a-scenario","text":"output = pymagicc.run(scenario) # Projected temperature adjusted to pre-industrial mean temp = (output[\"SURFACE_TEMP\"].GLOBAL - output[\"SURFACE_TEMP\"].loc[1850:2100].GLOBAL.mean())","title":"Run MAGICC for a scenario"},{"location":"#using-a-different-magicc-version","text":"A custom version of MAGICC may be used with pymagicc using the MAGICC_EXECUTABLE_6 and MAGICC_EXECUTABLE_7 environment variables for MAGICC6 and MAGICC7 respectively. These environment variables should be set to the location of the magicc executable (either magicc for linux/mac or magicc.exe for Windows). For example, a custom MAGICC7 folder located at /tmp/magicc can be used on under Linux by setting MAGICC_EXECUTABLE_7 to /tmp/magicc/run/magicc . Example usage in Bash: MAGICC_EXECUTABLE_7=/tmp/magicc/run/magicc.exe python run_tests.py Or in a script: #!/bin/bash export MAGICC_EXECUTABLE_7=tmp/magicc/run/magicc.exe python run_tests.py python generate_plots.py","title":"Using a different MAGICC version"},{"location":"#contributing","text":"Please report issues or discuss feature requests on Pymagicc's issue tracker . When creating a pull request, please append the pull request url with either expand=1&template=new_feature.md or expand=1&template=bug_fix.md in order to use the templates we provide for pull requests. For example, when you land on the page with title 'Open a pull request' (either after hitting 'New Pull Request' --> 'Create Pull Request' or by some other means), your url will look something like 'https://github.com/openclimatedata/pymagicc/compare/update-readme-to-explain-pr-template'. Adding 'expand=1&template=bug_fix.md' to this makes it 'https://github.com/openclimatedata/pymagicc/compare/update-readme-to-explain-pr-template?expand=1&template=new_feature.md'. If you then refresh the page, you will then see that the template is automatically added to the pull request for you. You can also contact the pymagicc authors via email robert.gieseke@pik-potsdam.de .","title":"Contributing"},{"location":"#license","text":"The compiled MAGICC binary by Tom Wigley, Sarah Raper, and Malte Meinshausen included in this package is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License . The pymagicc wrapper is free software under the GNU Affero General Public License v3, see LICENSE . If you make any use of MAGICC, please cite: M. Meinshausen, S. C. B. Raper and T. M. L. Wigley (2011). \"Emulating coupled atmosphere-ocean and carbon cycle models with a simpler model, MAGICC6: Part I \"Model Description and Calibration.\" Atmospheric Chemistry and Physics 11: 1417-1456. doi:10.5194/acp-11-1417-2011 See also the MAGICC website and Wiki for further information.","title":"License"},{"location":"pymagicc.api/","text":"pymagicc.api MAGICCBase MAGICCBase(self, root_dir=None) Provides access to the MAGICC binary and configuration. To enable multiple MAGICC 'setups' to be configured independently, the MAGICC directory containing the input files, configuration and binary is copied to a new folder. The configuration in this MAGICC copy can then be edited without impacting other instances or your original MAGICC distribution. A MAGICC instance first has to be setup by calling create_copy . If many model runs are being performed this step only has to be performed once. The run method can then be called many times without re-copying the files each time. Between each call to run , the configuration files can be updated to perform runs with different configurations. Parameters root_dir (str) : If root_dir is supplied, an existing MAGICC 'setup' is used. MAGICC6 MAGICC6(self, root_dir=None) MAGICC7 MAGICC7(self, root_dir=None)","title":"pymagicc.api"},{"location":"pymagicc.config/","text":"pymagicc.config Module for collating configuration variables from various sources The order of preference is: Overrides > Environment variable > Defaults Overrides can be set using the ConfigStore","title":"pymagicc.config"},{"location":"pymagicc.input/","text":"pymagicc.input InputReader InputReader(self, filename) header_tags list() -> new empty list list(iterable) -> new list initialized from iterable's items process_data InputReader.process_data(self, stream, metadata) Extract the tabulated data from the input file Arguments stream (Streamlike object) : A Streamlike object (nominally StringIO) containing the table to be extracted metadata (dict) : metadata read in from the header and the namelist Returns df (pandas.DataFrame) : contains the data, processed to the standard MAGICCInput format metadata (dict) : updated metadata based on the processing performed process_header InputReader.process_header(self, header) Parse the header for additional metadata Arguments header (str) : all the lines in the header Returns return (dict) : the metadata in the header InputWriter InputWriter(self) write InputWriter.write(self, magicc_input, filename, filepath=None) Write a MAGICC input file from df and metadata Arguments magicc_input (MAGICCInput) : a MAGICCInput object which holds the data to write filename (str) : name of file to write to filepath (str) : path in which to write file. If not provided, the file will be written in the current directory (TODO : check this is true...) MAGICCInput MAGICCInput(self, filename=None) An interface to read and write the input files used by MAGICC. MAGICCInput can read input files from both MAGICC6 and MAGICC7. It returns files in a common format with a common vocabulary to simplify the process of reading, writing and handling MAGICC data. The MAGICCInput, once the target input file has been loaded, can be treated as a Pandas DataFrame. All the methods available to a DataFrame can be called on the MAGICCInput. with MAGICC6() as magicc: mdata = MAGICCInput('HISTRCP_CO2I_EMIS.IN') mdata.read(magicc.run_dir) mdata.plot() TODO: Write example for writing Parameters filename (str) : Name of the file to read read MAGICCInput.read(self, filepath=None, filename=None) Read an input file from disk Parameters filepath (str) : The directory to file the file from. This is often the run directory for a magicc instance. If None is passed, the run directory for the bundled version of MAGICC6 is used. filename (str) : The filename to read. Overrides any existing values. write MAGICCInput.write(self, filename, filepath=None) TODO: Implement writing to disk","title":"pymagicc.input"},{"location":"pymagicc/","text":"pymagicc read_scen_file read_scen_file(scen_file) Read a MAGICC .SCEN file Parameters scen_file (str) : Path to scen_file to read Returns output (DataFrame or Dict of DataFrames) : For World only scenarios, a single DataFrame with the data from the SCEN file. For scenarios with more than one region, a dictionary containing one DataFrame for each region. write_scen_file write_scen_file(scenario, path_or_buf=None, description1=None, description2=None, comment=None) Write a Dictionary of DataFrames or a DataFrame to a MAGICC .SCEN file. Note that it is assumed that your units match the ones which are defined in the units variable. This function provides no ability to convert units or read units from a DataFrame attribute or column. Parameters scenario (DataFrame or Dict of DataFrames) : If a single DataFrame is supplied, the data is assumed to be for the WORLD region. If a Dict of DataFrames is supplied then it is assumed that each DataFrame containes data for one region. path_or_buf (str or buffer) : Pathname or file-like object to which to write the scenario. description_1 (str) : Optional description line. description_2 (str) : Optional second description line. comment(str) : Optional comment at end of scenario file. run run(scenario, return_config=False, **kwargs) Run a MAGICC scenario and return output data and (optionally) config parameters Parameters return_config (bool) : If True, return the full list of parameters used. default False kwargs : Parameters overwriting default parameters. Returns output (dict) : Dictionary with all data from the MAGICC output files in DataFrames parameters (dict) : Parameters used in the MAGICC run. Only returned when return_config is set to True","title":"pymagicc"}]}