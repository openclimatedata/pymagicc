{
    "docs": [
        {
            "location": "/",
            "text": "Pymagicc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPymagicc is a Python wrapper around the reduced complexity climate model\n\nMAGICC6\n. It wraps the CC-BY-NC-SA licensed\n\nMAGICC6 binary\n. Pymagicc itself is AGPL licensed.\n\n\nMAGICC (Model for the Assessment of Greenhouse Gas Induced Climate Change)\nis widely used in the assessment of future emissions pathways in climate policy analyses,\ne.g. in the Fifth Assessment Report of the\nIntergovernmental Panel on Climate Change or to model the physical aspects of climate change in Integrated Assessment Models (IAMs).\n\n\nPymagicc makes the MAGICC model easily installable and usable from Python and allows for the easy modification of all MAGICC model parameters and emissions scenarios directly from Python.\nIn climate research it can, for example, be used in the analysis of mitigation scenarios, in Integrated Assessment Models, complex climate model emulation, and uncertainty analyses, as well as in climate science education and communication.\n\n\nSee \nwww.magicc.org\n and \nMeinshausen et al. 2011\n for further information.\n\n\nBasic Usage\n\n\nimport pymagicc\nfrom pymagicc import scenarios\nimport matplotlib.pyplot as plt\n\nfor name, scen in scenarios.items():\n    results, params = pymagicc.run(scen, return_config=True)\n    temp = (results[\"SURFACE_TEMP\"].GLOBAL.loc[1850:] -\n            results[\"SURFACE_TEMP\"].GLOBAL.loc[1850:1900].mean())\n    temp.plot(label=name)\nplt.legend()\nplt.title(\"Global Mean Temperature Projection\")\nplt.ylabel(u\"\u00b0C over pre-industrial (1850-1900 mean)\")\n# Run `plt.show()` to display the plot when running this example\n# interactively or add `%matplotlib inline` on top when in a Jupyter Notebook.\n\n\n\n\n\n\nFor more example usage see this \nJupyter Notebook\n.\nThanks to the \nBinder project\n the \nNotebook\n can be run and modified without installing anything locally. A small interactive \ndemo app\n using Jupyter Notebook's \nappmode extension\n\nis also available.\n\n\nInstallation\n\n\npip install pymagicc\n\n\n\nOn Linux and OS X the original compiled Windows binary available on\nhttp://www.magicc.org/ and included in Pymagicc\ncan run using \nWine\n.\n\n\nOn modern 64-bit systems one needs to use the 32-bit version of Wine\n\n\nsudo dpkg --add-architecture i386\nsudo apt-get install wine32\n\n\n\nOn 32-bit systems Debian/Ubuntu-based systems \nwine\n can be installed with\n\n\nsudo apt-get install wine\n\n\n\nOn OS X \nwine\n is available in the Homebrew package manager:\n\n\nbrew install wine\n\n\n\nIt should also be available in other package managers, as well as directly from the \nWine project\n.\n\n\nNote that after the first install the first run of Pymagicc might be slow due\nto setting up of the \nwine\n configuration and be accompanied by pop-ups or\ndebug output.\n\n\nTo run an example session using Jupyter Notebook and Python 3 you can run the\nfollowing commands to create a virtual environment \nvenv\n and install an\neditable version for local development:\n\n\ngit clone https://github.com/openclimatedata/pymagicc.git\n\ncd pymagicc\nmake venv\n./venv/bin/pip install --editable .\n./venv/bin/jupyter-notebook notebooks/Example.ipynb\n\n\n\nDevelopment\n\n\nFor local development, install dependencies and an editable version of Pymagicc from a clone or download of the Pymagicc repository with\n\n\nmake venv\n./venv/bin/pip install --editable .\n\n\n\nTo run the tests run\n\n\n./venv/bin/pytest tests --verbose\n\n\n\nTo skip tests which run MAGICC and take longer use\n\n\n./venv/bin/pytest tests --skip-slow\n\n\n\nTo get a test coverage report, run\n\n\n./venv/bin/pytest --cov\n\n\n\nTo unify coding style \nblack\n is used.\n\n\nTo format the files in \npymagicc\n and \ntests\n as well as \nsetup.py\n run\n\n\nmake black\n\n\n\n\nMore Usage Examples\n\n\nUse an included scenario\n\n\nfrom pymagicc import rcp26\n\nrcp26[\"WORLD\"].head()\n\n\n\n\nRead a MAGICC scenario file\n\n\nfrom pymagicc import read_scen_file\n\nscenario = read_scen_file(\"PATHWAY.SCEN\")\n\n\n\n\nCreate a new scenario\n\n\nPymagicc uses Pandas DataFrames to represent scenarios. Dictionaries are\nused for scenarios with multiple regions.\n\n\nimport pandas as pd\n\nscenario = pd.DataFrame({\n    \"FossilCO2\": [8, 10, 9],\n    \"OtherCO2\": [1.2, 1.1, 1.2],\n    \"CH4\": [300, 250, 200]},\n    index=[2010, 2020, 2030]\n)\n\n\n\n\n\nRun MAGICC for a scenario\n\n\noutput = pymagicc.run(scenario)\n\n# Projected temperature adjusted to pre-industrial mean\ntemp = (output[\"SURFACE_TEMP\"].GLOBAL -\n        output[\"SURFACE_TEMP\"].loc[1850:2100].GLOBAL.mean())\n\n\n\n\nUsing a different MAGICC version\n\n\nA custom version of MAGICC may be used with \npymagicc\n using the\n\nMAGICC_EXECUTABLE_6\n and \nMAGICC_EXECUTABLE_7\n environment variables for MAGICC6\n and MAGICC7 respectively. These environment variables should be set to the\n location of the magicc executable (either \nmagicc\n for linux/mac or\n \nmagicc.exe\n for Windows).\nFor example, a custom MAGICC7 folder located at \n/tmp/magicc\n can be used on\n under Linux by setting \nMAGICC_EXECUTABLE_7\n to \n/tmp/magicc/run/magicc\n.\n\n\nExample usage in Bash:\n\n\nMAGICC_EXECUTABLE_7=/tmp/magicc/run/magicc.exe python run_tests.py\n\n\n\n\nOr in a script:\n\n\n#!/bin/bash\nexport MAGICC_EXECUTABLE_7=tmp/magicc/run/magicc.exe\npython run_tests.py\npython generate_plots.py\n\n\n\n\nContributing\n\n\nPlease report issues or discuss feature requests on Pymagicc's\n\nissue tracker\n.\n\n\nYou can also contact the \npymagicc\n authors via email\n\nrobert.gieseke@pik-potsdam.de\n.\n\n\nLicense\n\n\nThe \ncompiled MAGICC binary\n by Tom Wigley,\nSarah Raper, and Malte Meinshausen included in this package is licensed under a \nCreative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n.\n\n\nThe \npymagicc\n wrapper is free software under the GNU Affero General Public\nLicense v3, see \nLICENSE\n.\n\n\nIf you make any use of MAGICC, please cite:\n\n\n\n\nM. Meinshausen, S. C. B. Raper and T. M. L. Wigley (2011). \"Emulating coupled\natmosphere-ocean and carbon cycle models with a simpler model, MAGICC6: Part I\n\"Model Description and Calibration.\" Atmospheric Chemistry and Physics 11: 1417-1456.\n\ndoi:10.5194/acp-11-1417-2011\n\n\n\n\nSee also the \nMAGICC website\n and\n\nWiki\n\nfor further information.",
            "title": "Overview"
        },
        {
            "location": "/#pymagicc",
            "text": "Pymagicc is a Python wrapper around the reduced complexity climate model MAGICC6 . It wraps the CC-BY-NC-SA licensed MAGICC6 binary . Pymagicc itself is AGPL licensed.  MAGICC (Model for the Assessment of Greenhouse Gas Induced Climate Change)\nis widely used in the assessment of future emissions pathways in climate policy analyses,\ne.g. in the Fifth Assessment Report of the\nIntergovernmental Panel on Climate Change or to model the physical aspects of climate change in Integrated Assessment Models (IAMs).  Pymagicc makes the MAGICC model easily installable and usable from Python and allows for the easy modification of all MAGICC model parameters and emissions scenarios directly from Python.\nIn climate research it can, for example, be used in the analysis of mitigation scenarios, in Integrated Assessment Models, complex climate model emulation, and uncertainty analyses, as well as in climate science education and communication.  See  www.magicc.org  and  Meinshausen et al. 2011  for further information.",
            "title": "Pymagicc"
        },
        {
            "location": "/#basic-usage",
            "text": "import pymagicc\nfrom pymagicc import scenarios\nimport matplotlib.pyplot as plt\n\nfor name, scen in scenarios.items():\n    results, params = pymagicc.run(scen, return_config=True)\n    temp = (results[\"SURFACE_TEMP\"].GLOBAL.loc[1850:] -\n            results[\"SURFACE_TEMP\"].GLOBAL.loc[1850:1900].mean())\n    temp.plot(label=name)\nplt.legend()\nplt.title(\"Global Mean Temperature Projection\")\nplt.ylabel(u\"\u00b0C over pre-industrial (1850-1900 mean)\")\n# Run `plt.show()` to display the plot when running this example\n# interactively or add `%matplotlib inline` on top when in a Jupyter Notebook.   For more example usage see this  Jupyter Notebook .\nThanks to the  Binder project  the  Notebook  can be run and modified without installing anything locally. A small interactive  demo app  using Jupyter Notebook's  appmode extension \nis also available.",
            "title": "Basic Usage"
        },
        {
            "location": "/#installation",
            "text": "pip install pymagicc  On Linux and OS X the original compiled Windows binary available on\nhttp://www.magicc.org/ and included in Pymagicc\ncan run using  Wine .  On modern 64-bit systems one needs to use the 32-bit version of Wine  sudo dpkg --add-architecture i386\nsudo apt-get install wine32  On 32-bit systems Debian/Ubuntu-based systems  wine  can be installed with  sudo apt-get install wine  On OS X  wine  is available in the Homebrew package manager:  brew install wine  It should also be available in other package managers, as well as directly from the  Wine project .  Note that after the first install the first run of Pymagicc might be slow due\nto setting up of the  wine  configuration and be accompanied by pop-ups or\ndebug output.  To run an example session using Jupyter Notebook and Python 3 you can run the\nfollowing commands to create a virtual environment  venv  and install an\neditable version for local development:  git clone https://github.com/openclimatedata/pymagicc.git\n\ncd pymagicc\nmake venv\n./venv/bin/pip install --editable .\n./venv/bin/jupyter-notebook notebooks/Example.ipynb",
            "title": "Installation"
        },
        {
            "location": "/#development",
            "text": "For local development, install dependencies and an editable version of Pymagicc from a clone or download of the Pymagicc repository with  make venv\n./venv/bin/pip install --editable .  To run the tests run  ./venv/bin/pytest tests --verbose  To skip tests which run MAGICC and take longer use  ./venv/bin/pytest tests --skip-slow  To get a test coverage report, run  ./venv/bin/pytest --cov  To unify coding style  black  is used.  To format the files in  pymagicc  and  tests  as well as  setup.py  run  make black",
            "title": "Development"
        },
        {
            "location": "/#more-usage-examples",
            "text": "",
            "title": "More Usage Examples"
        },
        {
            "location": "/#use-an-included-scenario",
            "text": "from pymagicc import rcp26\n\nrcp26[\"WORLD\"].head()",
            "title": "Use an included scenario"
        },
        {
            "location": "/#read-a-magicc-scenario-file",
            "text": "from pymagicc import read_scen_file\n\nscenario = read_scen_file(\"PATHWAY.SCEN\")",
            "title": "Read a MAGICC scenario file"
        },
        {
            "location": "/#create-a-new-scenario",
            "text": "Pymagicc uses Pandas DataFrames to represent scenarios. Dictionaries are\nused for scenarios with multiple regions.  import pandas as pd\n\nscenario = pd.DataFrame({\n    \"FossilCO2\": [8, 10, 9],\n    \"OtherCO2\": [1.2, 1.1, 1.2],\n    \"CH4\": [300, 250, 200]},\n    index=[2010, 2020, 2030]\n)",
            "title": "Create a new scenario"
        },
        {
            "location": "/#run-magicc-for-a-scenario",
            "text": "output = pymagicc.run(scenario)\n\n# Projected temperature adjusted to pre-industrial mean\ntemp = (output[\"SURFACE_TEMP\"].GLOBAL -\n        output[\"SURFACE_TEMP\"].loc[1850:2100].GLOBAL.mean())",
            "title": "Run MAGICC for a scenario"
        },
        {
            "location": "/#using-a-different-magicc-version",
            "text": "A custom version of MAGICC may be used with  pymagicc  using the MAGICC_EXECUTABLE_6  and  MAGICC_EXECUTABLE_7  environment variables for MAGICC6\n and MAGICC7 respectively. These environment variables should be set to the\n location of the magicc executable (either  magicc  for linux/mac or\n  magicc.exe  for Windows).\nFor example, a custom MAGICC7 folder located at  /tmp/magicc  can be used on\n under Linux by setting  MAGICC_EXECUTABLE_7  to  /tmp/magicc/run/magicc .  Example usage in Bash:  MAGICC_EXECUTABLE_7=/tmp/magicc/run/magicc.exe python run_tests.py  Or in a script:  #!/bin/bash\nexport MAGICC_EXECUTABLE_7=tmp/magicc/run/magicc.exe\npython run_tests.py\npython generate_plots.py",
            "title": "Using a different MAGICC version"
        },
        {
            "location": "/#contributing",
            "text": "Please report issues or discuss feature requests on Pymagicc's issue tracker .  You can also contact the  pymagicc  authors via email robert.gieseke@pik-potsdam.de .",
            "title": "Contributing"
        },
        {
            "location": "/#license",
            "text": "The  compiled MAGICC binary  by Tom Wigley,\nSarah Raper, and Malte Meinshausen included in this package is licensed under a  Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License .  The  pymagicc  wrapper is free software under the GNU Affero General Public\nLicense v3, see  LICENSE .  If you make any use of MAGICC, please cite:   M. Meinshausen, S. C. B. Raper and T. M. L. Wigley (2011). \"Emulating coupled\natmosphere-ocean and carbon cycle models with a simpler model, MAGICC6: Part I\n\"Model Description and Calibration.\" Atmospheric Chemistry and Physics 11: 1417-1456. doi:10.5194/acp-11-1417-2011   See also the  MAGICC website  and Wiki \nfor further information.",
            "title": "License"
        },
        {
            "location": "/pymagicc/",
            "text": "pymagicc\n\n\n\nread_scen_file\n\n\n\nread_scen_file(scen_file)\n\n\n\n\nRead a MAGICC .SCEN file\n\n\nParameters\n\n\n\n\nscen_file (str)\n: Path to scen_file to read\n\n\n\n\nReturns\n\n\noutput (DataFrame or Dict of DataFrames)\n: For World only scenarios, a\nsingle DataFrame with the data from the SCEN file. For scenarios with more\nthan one region, a dictionary containing one DataFrame for each region.\n\n\nwrite_scen_file\n\n\n\nwrite_scen_file(scenario, path_or_buf=None, description1=None, description2=None, comment=None)\n\n\n\n\nWrite a Dictionary of DataFrames or a DataFrame to a MAGICC \n.SCEN\n file.\n\n\nNote that it is assumed that your units match the ones which are defined\nin the units variable. This function provides no ability to convert units\nor read units from a DataFrame attribute or column.\n\n\nParameters\n\n\n\n\nscenario (DataFrame or Dict of DataFrames)\n: If a single DataFrame is\n    supplied, the data is assumed to be for the WORLD region. If a Dict of\n    DataFrames is supplied then it is assumed that each DataFrame\n    containes data for one region.\n\n\npath_or_buf (str or buffer)\n: Pathname or file-like object to which to write\n    the scenario.\n\n\ndescription_1 (str)\n: Optional description line.\n\n\ndescription_2 (str)\n: Optional second description line.\n\n\ncomment(str)\n: Optional comment at end of scenario file.\n\n\n\n\nrun\n\n\n\nrun(scenario, return_config=False, **kwargs)\n\n\n\n\nRun a MAGICC scenario and return output data and (optionally) config parameters\n\n\nParameters\n\n\n\n\nreturn_config (bool)\n: If True, return the full list of parameters used. default False\n\n\nkwargs\n:\n    Parameters overwriting default parameters.\n\n\n\n\nReturns\n\n\noutput (dict)\n: Dictionary with all data from the MAGICC output files in\n    DataFrames\n\nparameters (dict)\n: Parameters used in the MAGICC run. Only returned when\n    \nreturn_config\n is set to True",
            "title": "pymagicc"
        },
        {
            "location": "/pymagicc.api/",
            "text": "pymagicc.api\n\n\n\nMAGICCBase\n\n\n\nMAGICCBase(self, root_dir=None)\n\n\n\n\nProvides access to the MAGICC binary and configuration.\n\n\nTo enable multiple MAGICC 'setups' to be configured independently,\nthe MAGICC directory containing the input files, configuration\nand binary is copied to a new folder. The configuration in this\nMAGICC copy can then be edited without impacting other instances or your\noriginal MAGICC distribution.\n\n\nA \nMAGICC\n instance first has to be setup by calling\n\ncreate_copy\n. If many model runs are being performed this step only has\nto be performed once. The \nrun\n method can then be called many times\nwithout re-copying the files each time. Between each call to \nrun\n, the\nconfiguration files can be updated to perform runs with different\nconfigurations.\n\n\nParameters\n\n\n\n\nroot_dir (str)\n: If \nroot_dir\n is supplied, an existing MAGICC 'setup' is\n    used.",
            "title": "pymagicc.api"
        },
        {
            "location": "/pymagicc.input/",
            "text": "pymagicc.input\n\n\n\nMAGICCInput\n\n\n\nMAGICCInput(self, filename=None)\n\n\n\n\nAn interface to read and write the input files used by MAGICC.\n\n\nMAGICCInput can read input files from both MAGICC6 and MAGICC7. It returns\nfiles in a common format with a common vocabulary to simplify the process\nof reading, writing and handling MAGICC data.\n\n\nThe MAGICCInput, once the target input file has been loaded, can be\ntreated as a Pandas DataFrame. All the methods available to a DataFrame\ncan be called on the MAGICCInput.\n\n\nwith MAGICC6() as magicc:\n    mdata = MAGICCInput('HISTRCP_CO2I_EMIS.IN')\n    mdata.read(magicc.run_dir)\n    mdata.plot()\n\n\n\n\nTODO: Write example for writing\n\n\nParameters\n\n\n\n\nfilename (str)\n: Name of the file to read\n\n\n\n\nread\n\n\n\nMAGICCInput.read(self, filepath=None, filename=None)\n\n\n\n\nRead an input file from disk\n\n\nParameters\n\n\n\n\nfilepath (str)\n: The directory to file the file from. This is often the\n    run directory for a magicc instance. If None is passed,\n    the run directory for the bundled version of MAGICC6 is used.\n\n\nfilename (str)\n: The filename to read. Overrides any existing values.\n\n\n\n\nwrite\n\n\n\nMAGICCInput.write(self, filename)\n\n\n\n\nTODO: Implement writing to disk",
            "title": "pymagicc.input"
        },
        {
            "location": "/pymagicc.config/",
            "text": "pymagicc.config\n\n\n\nModule for collating configuration variables from various sources\n\n\nThe order of preference is:\nOverrides > Environment variable > Defaults\n\n\nOverrides can be set using the ConfigStore",
            "title": "pymagicc.config"
        }
    ]
}