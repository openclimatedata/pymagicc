{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"api/","text":"pymagicc read_scen_file read_scen_file(scen_file) Read a MAGICC .SCEN file Parameters scen_file (str) : Path to scen_file to read Returns output (DataFrame or Dict of DataFrames) : For World only scenarios, a single DataFrame with the data from the SCEN file. For scenarios with more than one region, a dictionary containing one DataFrame for each region. write_scen_file write_scen_file(scenario, path_or_buf=None, description1=None, description2=None, comment=None) Write a Dictionary of DataFrames or a DataFrame to a MAGICC .SCEN file. Note that it is assumed that your units match the ones which are defined in the units variable. This function provides no ability to convert units or read units from a DataFrame attribute or column. Parameters scenario (DataFrame or Dict of DataFrames) : If a single DataFrame is supplied, the data is assumed to be for the WORLD region. If a Dict of DataFrames is supplied then it is assumed that each DataFrame containes data for one region. path_or_buf (str or buffer) : Pathname or file-like object to which to write the scenario. description_1 (str) : Optional description line. description_2 (str) : Optional second description line. comment(str) : Optional comment at end of scenario file. run run(scenario, return_config=False, **kwargs) Run a MAGICC scenario and return output data and (optionally) config parameters Parameters return_config (bool) : If True, return the full list of parameters used. default False kwargs : Parameters overwriting default parameters. Returns output (dict) : Dictionary with all data from the MAGICC output files in DataFrames parameters (dict) : Parameters used in the MAGICC run. Only returned when return_config is set to True pymagicc.api MAGICCBase MAGICCBase(self, root_dir=None) Provides access to the MAGICC binary and configuration. To enable multiple MAGICC 'setups' to be configured independently, the MAGICC directory containing the input files, configuration and binary is copied to a new folder. The configuration in this MAGICC copy can then be edited without impacting other instances or your original MAGICC distribution. A MAGICC instance first has to be setup by calling create_copy . If many model runs are being performed this step only has to be performed once. The run method can then be called many times without re-copying the files each time. Between each call to run , the configuration files can be updated to perform runs with different configurations. Parameters root_dir (str) : If root_dir is supplied, an existing MAGICC 'setup' is used. pymagicc.io MAGICCData MAGICCData(self, filename=None) An interface to read and write the input files used by MAGICC. MAGICCData can read input files from both MAGICC6 and MAGICC7. It returns files in a common format with a common vocabulary to simplify the process of reading, writing and handling MAGICC data. The MAGICCData, once the target input file has been loaded, can be treated as a Pandas DataFrame. All the methods available to a DataFrame can be called on the MAGICCData. with MAGICC6() as magicc: mdata = MAGICCData('HISTRCP_CO2I_EMIS.IN') mdata.read(magicc.run_dir) mdata.plot() TODO: Write example for writing Parameters filename (str) : Name of the file to read read MAGICCData.read(self, filepath=None, filename=None) Read an input file from disk Parameters filepath (str) : The directory to file the file from. This is often the run directory for a magicc instance. If None is passed, the run directory for the bundled version of MAGICC6 is used. filename (str) : The filename to read. Overrides any existing values. write MAGICCData.write(self, filename) TODO: Implement writing to disk pymagicc.config Module for collating configuration variables from various sources The order of preference is: Overrides > Environment variable > Defaults Overrides can be set using the ConfigStore","title":"Api"},{"location":"pymagicc.api/","text":"pymagicc.api MAGICCBase MAGICCBase(self, root_dir=None) Provides access to the MAGICC binary and configuration. To enable multiple MAGICC 'setups' to be configured independently, the MAGICC directory containing the input files, configuration and binary is copied to a new folder. The configuration in this MAGICC copy can then be edited without impacting other instances or your original MAGICC distribution. A MAGICC instance first has to be setup by calling create_copy . If many model runs are being performed this step only has to be performed once. The run method can then be called many times without re-copying the files each time. Between each call to run , the configuration files can be updated to perform runs with different configurations. Parameters root_dir (str) : If root_dir is supplied, an existing MAGICC 'setup' is used. MAGICC6 MAGICC6(self, root_dir=None) MAGICC7 MAGICC7(self, root_dir=None)","title":"pymagicc.api"},{"location":"pymagicc.config/","text":"pymagicc.config Module for collating configuration variables from various sources The order of preference is: Overrides > Environment variable > Defaults Overrides can be set using the ConfigStore","title":"pymagicc.config"},{"location":"pymagicc.input/","text":"","title":"Pymagicc.input"},{"location":"pymagicc.io/","text":"pymagicc.io MAGICCData MAGICCData(self, filename=None) An interface to read and write the input files used by MAGICC. MAGICCData can read input files from both MAGICC6 and MAGICC7. It returns files in a common format with a common vocabulary to simplify the process of reading, writing and handling MAGICC data. MAGICCData, once the target input file has been loaded, can be treated as a Pandas DataFrame. All the methods available to a DataFrame can be called on MAGICCData. >>> with MAGICC6() as magicc: >>> mdata = MAGICCData(\"HISTRCP_CO2I_EMIS.IN\") >>> mdata.read(magicc.run_dir) >>> mdata.plot() A MAGICCData instance can also be used to write files e.g. >>> with MAGICC6() as magicc: >>> mdata = MAGICCData(\"HISTRCP_CO2I_EMIS.IN\") >>> mdata.read(magicc.run_dir) >>> mdata.write(\"EXAMPLE_CO2I_EMIS.IN\", \"./\") See notebooks/Input-Examples.ipynb for further usage examples. Initialisation parameters filename (str): Optional file name, including extension, for the target file, i.e. 'HISTRCP_CO2I_EMIS.IN'. The file is not read until the search directory is provided in read . This allows for MAGICCData files to be lazy-loaded once the appropriate MAGICC run directory is known. read MAGICCData.read(self, filepath=None, filename=None) Read an input file from disk Parameters filepath (str) : The directory to read the file from. This is often the run directory for a magicc instance. If None is passed, the run directory for the version of MAGICC6 included in pymagicc is used. filename (str) : The filename to read. Overrides any existing values. If None is passed, the filename used to initialise the MAGICCData instance is used. write MAGICCData.write(self, filename_to_write, filepath=None) Write an input file from disk Parameters filename_to_write (str) : The name of the file to write. The filename is critically important as it tells MAGICC what kind of file to write. filepath_to_write (str) : The directory to write the file to. This is often the run directory for a magicc instance. If None is passed, the current working directory is used. determine_tool MAGICCData.determine_tool(self, filename, tool_to_get) Determine the tool to use for reading/writing The function uses an internally defined set of mappings between filenames, regular expresions and readers/writers to work out which tool to use for a given task, given the filename. It is intended for internal use only, but is public because of its importance to the input/output of pymagicc. If it fails, it will give clear error messages about why and what the available regular expressions are. >>> mdata = MAGICCData() >>> mdata.read(MAGICC7_DIR, HISTRCP_CO2I_EMIS.txt) ValueError: Couldn't find appropriate writer for HISTRCP_CO2I_EMIS.txt. The file must be one of the following types and the filename must match its corresponding regular expression: SCEN: ^.*\\.SCEN$ SCEN7: ^.*\\.SCEN7$ prn: ^.*\\.prn$ Parameters filename (str) : Name of the file to read/write, including extension tool_to_get (str) : The tool to get, valid options are \"reader\", \"writer\". Invalid values will throw a KeyError.","title":"pymagicc.io"},{"location":"pymagicc/","text":"pymagicc read_scen_file read_scen_file(scen_file) Read a MAGICC .SCEN file Parameters scen_file (str) : Path to scen_file to read Returns output (DataFrame or Dict of DataFrames) : For World only scenarios, a single DataFrame with the data from the SCEN file. For scenarios with more than one region, a dictionary containing one DataFrame for each region. write_scen_file write_scen_file(scenario, path_or_buf=None, description1=None, description2=None, comment=None) Write a Dictionary of DataFrames or a DataFrame to a MAGICC .SCEN file. Note that it is assumed that your units match the ones which are defined in the units variable. This function provides no ability to convert units or read units from a DataFrame attribute or column. Parameters scenario (DataFrame or Dict of DataFrames) : If a single DataFrame is supplied, the data is assumed to be for the WORLD region. If a Dict of DataFrames is supplied then it is assumed that each DataFrame containes data for one region. path_or_buf (str or buffer) : Pathname or file-like object to which to write the scenario. description_1 (str) : Optional description line. description_2 (str) : Optional second description line. comment(str) : Optional comment at end of scenario file. run run(scenario, return_config=False, **kwargs) Run a MAGICC scenario and return output data and (optionally) config parameters Parameters return_config (bool) : If True, return the full list of parameters used. default False kwargs : Parameters overwriting default parameters. Returns output (dict) : Dictionary with all data from the MAGICC output files in DataFrames parameters (dict) : Parameters used in the MAGICC run. Only returned when return_config is set to True","title":"pymagicc"}]}